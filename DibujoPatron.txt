#include <Wire.h>
#define DIRECCION_PANTALLA  0x3C
void inicializar_pantalla()
{
    Wire.begin(); //Iniciar la comunicacion I2C de Arduino
 
 
    //Aumentar la frecuencia de SCL a 400 kHz
    //Esto aumentara la velocidad de refresco
    TWBR = 12;
 
 
    /* Inicializar la pantalla, siguiendo las instrucciones
       exactas de la pag. 64 de la documentacion:   */
 
    //Iniciar la comunicacion con la pantalla
    Wire.beginTransmission(DIRECCION_PANTALLA);
     
    //Le decimos a la pantalla que viene una lista de comandos de configuracion
    Wire.write(0x00);
 
    //Apagar la pantalla
    Wire.write(0xAE);
 
    // Establecer el maximo de filas a 0x3F = 63
    // es decir, ira de 0 a 63, por tanto tenemos 64 filas de pixeles
    Wire.write(0xA8);
    Wire.write(0x3F);
 
    //Poner el offset a 0
    Wire.write(0xD3);
    Wire.write(0x00);
 
    //Poner el comienzo de linea a 0
    Wire.write(0x40);
 
    //Invertir el eje X de pantalla, por si esta girada.
    //Puedes cambiarlo por 0xA0 si necesitas cambiar la orientacion
    Wire.write(0xA1);
 
    //Invertir el eje Y de la patnalla
    //Puedes cambiarlo por 0xC0 si necesitas cambiar la orientacion
    Wire.write(0xC8);
 
    //Mapear los pines COM
    Wire.write(0xDA);
    Wire.write(0x12);
    //Al parecer, la unica configuracion que funciona con mi modelo es 0x12, a pesar
    // de que en la documentacion dice que hay que poner 0x02
 
 
    //Configurar el contraste
    Wire.write(0x81);
    Wire.write(0x7F); //Este valor tiene que estar entre 0x00 (min) y 0xFF (max)
 
     
    //Este comando ordena al chip que active el output de la pantalla en funcion del contenido
    //almacenado en su GDDRAM
    Wire.write(0xA4);
 
    //Poner la pantalla en modo Normal
    Wire.write(0xA6);
 
    //Establecer la velocidad del Oscilador
    Wire.write(0xD5);
    Wire.write(0x80);
 
    //Activar el 'charge pump'
    Wire.write(0x8D);
    Wire.write(0x14);
 
    //Encender la pantalla
    Wire.write(0xAF);
 
 
    //Como extra, establecemos el rango de columnas y paginas
    Wire.write(0x21); //Columnas de 0 a 127
    Wire.write(0x00);
    Wire.write(0x7F);
    Wire.write(0x22); //Paginas de 0 a 7
    Wire.write(0x00);
    Wire.write(0x07);
 
    //Modo de escritura horizontal
    //en mi modelo no haria falta enviar este comando (por defecto utiliza este modo)
    Wire.write(0x20);
    Wire.write(0x00);
 
    //Cerrar la comunicacion
    Wire.endTransmission();
     
    //Limpiamos la memoria, por si hubiera quedado memoria residual
    //de la ultima vez que se encendio la pantalla
    for(int i = 0; i < 1024; i++){
        Wire.beginTransmission(DIRECCION_PANTALLA);
        Wire.write(0x40);
        Wire.write(0x00);
        Wire.endTransmission();
        }
     
 
 
 
 
}

void setup() {
 // Inicializar el controlador de la pantalla OLED
 inicializar_pantalla();
}

void loop() {
    //La pantalla puede pintar un total de 128*8 = 1024 bytes
        for(int j = 0; j < 1024; j++)
    {
        Wire.beginTransmission(DIRECCION_PANTALLA); //Iniciar la comunicacion con la pantalla
        Wire.write(0x40); //Poner la pantalla en modo escritura
            Wire.write(0x81); //Enviar el byte de datos. 0x81 = 10000001
            Wire.endTransmission(); //Hay que cerrar siempre la comunicacion una vez enviado el byte
    }
 
     
}